<?phpnamespace Lottery;use Lottery\Assertion\Assertion as Assertion,    Lottery\Assertion\Raw2BetNumbers as Raw2BetNumbers;class Order{    protected $lotteryModel;    protected $awardNumberInfo;    protected $assertion;    protected $raw2BetNumbers;    protected $errorMsg;        protected $lotteryLog;    public function __construct($lotteryModel, $awardNumberInfo)    {        $this->lotteryModel = $lotteryModel;        $this->awardNumberInfo = $awardNumberInfo;        $this->assertion = new Assertion($awardNumberInfo['number']);        $this->raw2BetNumbers = new Raw2BetNumbers($this->lotteryModel->code_list);            	try {	        	 /**添加日志**/	        $this->lotteryLog = new \Collections\Lottery\Log();	    	$this->lotteryLog->lottery_id = intval($this->lotteryModel->id);	    	$this->lotteryLog->title = $this->lotteryModel->title;	    	$this->lotteryLog->expect = $this->awardNumberInfo['expect'];	    	$this->lotteryLog->addtime = time();	    	$this->lotteryLog->updatetime = time();	    	$this->lotteryLog->status_text = "开始执行开奖";	    	$this->lotteryLog->status = 0;	    	$this->lotteryLog->save();    		/**添加日志**/         } catch (\MongoException $e) {}           	    }        /**     * $this->setLog('', 1);     * Enter description here ...     * @param unknown_type $msg     * @param unknown_type $status     */    public function setLog($msg, $status , $handletime = 0){    	if ($this->lotteryLog->lottery_id) {    		$now = time();	    	$text = '';	    	if ($handletime) {	    		$text = '(处理时间:' . ($now - $this->lotteryLog->updatetime) . 's)';	    	}	    	$this->lotteryLog->status_text = $this->lotteryLog->status_text . '->' . $msg . $text;	    	$this->lotteryLog->updatetime = $now;	    	$this->lotteryLog->status = $status;	    	$this->lotteryLog->save();    	}    }    public function getErrorMsg()    {        return $this->errorMsg;    }    /**     * 计算单注奖金     *     * @param object $betModel 投注数据模型     * @param int $level int 中奖等级     * @return int     */    public function getBonus($betModel, $level)    {        if ($level <= 0) {            return 0;        }        if ($this->lotteryModel->type == 3) {            return bcmul($betModel->bet_money, $betModel->bet_times, 4);        } else {            //根据中奖级别 和 投注模式 奖金模式 计算奖金            if ($betModel->bet_mode == '元' || $betModel->bet_mode == '2元') {                $max = $betModel->playway->max_bouns;            } elseif ($betModel->bet_mode == '角' || $betModel->bet_mode == '2角') {                $max = $betModel->playway->max_bouns / 10;            } elseif ($betModel->bet_mode == '分' || $betModel->bet_mode == '2分') {                $max = $betModel->playway->max_bouns / 100;            } elseif ($betModel->bet_mode == '1元') {                $max = $betModel->playway->max_bouns / 2;            } elseif ($betModel->bet_mode == '1角') {                $max = $betModel->playway->max_bouns / 20;            } else {                return 0;            }            // 奖金计算的分母            if ($level == 1) {                $denominator = 1;            } elseif ($level == 2) {                $denominator = $betModel->playway->second_bouns_rate;            } elseif ($level == 3) {                $denominator = $betModel->playway->third_bouns_rate;            } elseif ($level == 4) {                $denominator = $betModel->playway->fourth_bouns_rate;            } elseif ($level == 5) {                $denominator = $betModel->playway->fifth_bouns_rate;            } elseif ($level == 6) {                $denominator = $betModel->playway->sixth_bouns_rate;            } elseif ($level == 7) {                $denominator = $betModel->playway->seventh_bouns_rate;            } elseif ($level == 8) {                $denominator = $betModel->playway->eighth_bouns_rate;            } else {                return 0;            }            if ($denominator <= 0) {                return 0;            }            $max = bcdiv($max, $denominator, 6); // 全奖            $bouns = bcsub($max, (($max) / ($this->lotteryModel->rate_max)) * ($this->lotteryModel->rate_max - $betModel->bet_rate), 6);            return bcmul($bouns, $betModel->bet_times, 6);        }    }    /**     * 计算返水     * @param object $betModel 投注数据模型     * @return int     */    public function getRefund($betModel)    {        if ($this->lotteryModel->type == 3 || $betModel->bet_rate >= 1950) {            return 0;        }        if ($betModel->bet_mode == '元'|| $betModel->bet_mode == '2元') {            $mode = 2;        } elseif ($betModel->bet_mode =='角'|| $betModel->bet_mode == '2角') {            $mode = 0.2;        } elseif ($betModel->bet_mode == '分'|| $betModel->bet_mode == '2分') {            $mode = 0.02;        } elseif ($betModel->bet_mode == '1元') {            $mode = 1;        } elseif ($betModel->bet_mode == '1角') {            $mode = 0.1;        } else {            return 0;        }        $bili = max(0, min(12.5, bcmul(0.125 - (($betModel->bet_rate - 1700) / 10 * 0.005), 100, 1)));        $reback = $mode * $bili / 100;        if ($reback < 0 || $reback > 0.25) {            return 0;        }        $refund = $betModel->bet_times * $reback;        return bcmul($betModel->bet_count, $refund, 6);    }    /*     * 更新试玩订单     */    protected function freshTrialOrder()    {        $now = time();    	try {	        	$this->setLog('更新试玩订单', 5);         } catch (\MongoException $e) {}        $db = $this->lotteryModel->getWriteConnection();        $db->begin();        $total_bonus_money = $total_refund_money = array();        /*         * 遍历查询指定采种某期未处理订单         * */        foreach (\Models\Lottery\Trial\Bet::find(array(            'conditions' => 'status=1 AND lottery_id=?0 AND expect=?1',            'bind' => array($this->lotteryModel->id, $this->awardNumberInfo['expect']),            'for_update' => true        )) as $betModel) {            if (!isset($total_bonus_money[$betModel->uid])) {                $total_bonus_money[$betModel->uid] = 0;                $total_refund_money[$betModel->uid] = 0;                $total_bet_money[$betModel->uid] = 0;            }            /*             * 获取玩法星级             * */            $star = $this->raw2BetNumbers->getStarByBetModel($betModel);            /*            * 获取投注号码所有排列组合出的中奖号            * */            $rawBetNumbers = $this->raw2BetNumbers->getBetNumbers($betModel);            foreach ($rawBetNumbers as $betNumbers) {                $winLevel = $this->assertion->assert($betModel->playway->playway_type->name, $betNumbers, $star);                if ($winLevel > 0) {                    $betModel->bonus_count++;                    //中奖金额                    $bonus_money = $this->getBonus($betModel, $winLevel);                    $betModel->bonus_money += $bonus_money;                    $total_bonus_money[$betModel->uid] += $bonus_money;                    // 中奖子订单信息                    $betSubModel = new \Models\Lottery\Bet\Sub();                    if (!$betSubModel->create(array(                        'bonus_number' => json_encode($betNumbers),                        'bonus_level' => $winLevel,                        'bonus_money' => $bonus_money,                        'bet_id' => $betModel->id                    ))) {                        $message = current($betSubModel->getMessages());                        $this->errorMsg = $this->lotteryModel->title . '第' . $this->awardNumberInfo['expect'] . '期订单更新失败：' . $message;                        $db->rollback();                        return false;                    }                }            }            if ($betModel->bonus_count > 0) {                $betModel->status = 3;            } else {                $betModel->status = 5;            }            // 计算返水            $refund_money = $this->getRefund($betModel);            $betModel->refund_money += $refund_money;            $total_refund_money[$betModel->uid] += $refund_money;            // 更新投注订单            $betModel->updatetime = $now;            if (!$betModel->save()) {                $db->rollback();                return false;            }        }        //更新余额        foreach ($total_bonus_money as $uid => $money) {            $money += isset($total_refund_money[$uid]) ? $total_refund_money[$uid] : 0;            if ($money > 0) {                if (!$db->execute("UPDATE `lottery_trial_user` SET `money`=`money`+? WHERE `uid`=?", array($money, $uid))) {                    $db->rollback();                    return false;                }            }        }        $db->commit();    	try {	        	$update_text = '';        	if (empty($total_bonus_money)) {        		$update_text = '(无数据更新)';        	} else {        		$update_text = '(有数据更新)';        	}        	$this->setLog('更新试玩订单完毕' . $update_text, 6, 1);         } catch (\MongoException $e) {}               return true;    }    /*     * 更新投注订单     */    protected function freshBetOrder()    {        $now = time();    	try {	        	$this->setLog('更新投注订单', 1);         } catch (\MongoException $e) {}        $db = $this->lotteryModel->getWriteConnection();        $db->begin();        $total_bonus_money = $total_refund_money = $total_bet_money = $all_money_log = array();        /*         * @Todo: 查找未更新的订单数据         * @param:lottery_id = 13         * @param:expect = 期号         * */        $yue = [];        foreach (\Models\Lottery\Bet::find(array(            'conditions' => 'status=1 AND lottery_id=?0 AND expect=?1',            'bind' => array($this->lotteryModel->id, $this->awardNumberInfo['expect']),            'for_update' => true        )) as $betModel) {            /*             * 初始未中奖者 各种金额为0             * */            if (!isset($total_bonus_money[$betModel->uid])) {                $total_bonus_money[$betModel->uid] = 0;                $total_refund_money[$betModel->uid] = 0;                $total_bet_money[$betModel->uid] = 0;            }            //累计中奖金额            $total_bet_money[$betModel->uid] += $betModel->bet_money;            //获取玩法星级            $star = $this->raw2BetNumbers->getStarByBetModel($betModel);            //获取所有投注号,排列组合成的号码数组 5星直选 全投有10w注            $rawBetNumbers = $this->raw2BetNumbers->getBetNumbers($betModel);            $array = [                '2'=>100000,    //五星直选                '3'=>100000,    //五星通选                '4'=>101110,    //五星连选                '1437'=>252,   //五星杂数                '1439'=>112,   //五星单对                '1441'=>63,    //五星双对                '1443'=>63,    //五星三条                '1445'=>25,    //五星葫芦                '1447'=>25,    //五星炸弹                //前                 后                '110'=>10000,       '15'=>10000,          //四直选                '126'=>10000,       '16'=>10000,          //四通选                '109'=>10110,       '17'=>10110,          //四连选                '1451'=>210,        '1449'=>210,          //四杂数                //前                 后                '1455'=>63,     '1453'=>63,          //四单对                '1459'=>45,     '1457'=>45,          //四双对                '1463'=>25,     '1461'=>25,          //四三条                //前     中         后                '81'=>1000,   '101'=>1000,    '102'=>1000,          //三直选                '83'=>1000,   '127'=>1000,    '128'=>1000,          //三通选                '84'=>1110,   '103'=>1110,    '104'=>1110,          //三连选                '80'=>90,   '105'=>90,    '106'=>90,          //三组三                '82'=>120,   '107'=>120,    '108'=>120,          //三组六                '1073'=>210,   '1078'=>210,    '1079'=>210,                  //三混合组选                '1074'=>220,   '1080'=>220,    '1081'=>220,          //三包点                '1023'=>1000,   '1792'=>1000,    '1026'=>1000,          //三和值                //前             后                '98'=>100,         '111'=>100,       //二直选                '100'=>45,        '112'=>45,          //二组选                '1071'=>55,        '1076'=>55,          //二包点                '1072'=>100,        '1077'=>100,          //二跨度                '1024'=>16,        '1027'=>16,          //二大小单双                '1022'=>100,        '1025'=>100,          //二和值                '97'=>1,          //定位胆                '130'=>10,       '129'=>10,         '65'=>10,          //三直选(包1胆)                '1083'=>45,       '1082'=>45,       '1075'=>45,          //三直选(包2胆                '134'=>550,       '133'=>550,       '60'=>550,          //三组选包1                '132'=>450,       '131'=>450,       '61'=>450,         //三组选包2                '135'=>10,   '52'=>10,  //二直包1                '136'=>100,   '50'=>100,  //二组包1                '1465'=>10,          //一帆风顺                '1467'=>10,          //好事成双                '1469'=>10,          //三星报喜                '1471'=>10,          //四季发财            ];            //计算比例            //   900/ 1000            $rate = -1 ;            if(isset($array[$betModel->playway_id])){                if($betModel->playway_id == 97){                    $rate = 1;                }else{                    $rate = round(count($rawBetNumbers) / $array[$betModel->playway_id],2) * 100;                }            }            $betModel->rate = $rate;            foreach ($rawBetNumbers as $betNumbers) {                //判断每个投注号是否中奖                $winLevel = $this->assertion->assert($betModel->playway->playway_type->name, $betNumbers, $star);                if ($winLevel > 0) {                    $betModel->bonus_count++;                    //中奖金额                    $bonus_money = $this->getBonus($betModel, $winLevel);                    $betModel->bonus_money += $bonus_money;                    $total_bonus_money[$betModel->uid] += $bonus_money;                    // 中奖子订单信息                    $betSubModel = new \Models\Lottery\Bet\Sub();                    if (!$betSubModel->create(array(                        'bonus_number' => json_encode($betNumbers),                        'bonus_level' => $winLevel,                        'bonus_money' => $bonus_money,                        'bet_id' => $betModel->id                    ))) {                        $message = current($betSubModel->getMessages());                        $this->errorMsg = $this->lotteryModel->title . '第' . $this->awardNumberInfo['expect'] . '期订单更新失败：' . $message;                        $db->rollback();                        return false;                    }                }            }            //中奖率计算            if ($betModel->bonus_count > 0) {                $betModel->status = 3;            } else {                $betModel->status = 5;            }            // 计算返水            $refund_money = $this->getRefund($betModel);            $betModel->refund_money += $refund_money;            $total_refund_money[$betModel->uid] += $refund_money;            // 更新投注订单            $betModel->updatetime = $now;                if($betModel->profile->paid_lock == 2){                    if(!isset($yue[$betModel->uid])){                        $m = 500 -  ($betModel->profile->lottery_money+$refund_money);  //  未充值                        $s = $m > 0 ? $m : 0;                        $betModel->bonus_money = min($s,$betModel->bonus_money);// 195                        $yue[$betModel->uid] = $betModel->bonus_money + $betModel->profile->lottery_money +$refund_money; //390                    }else{                        //195                        $m = 500 -  ($yue[$betModel->uid] +$refund_money);  //  未充值                        $s = $m > 0 ? $m : 0;                        $betModel->bonus_money = min($s,$betModel->bonus_money);                        $yue[$betModel->uid] = $yue[$betModel->uid] + $betModel->bonus_money + $refund_money;                    }                }            if (!$betModel->save()) {                $db->rollback();                return false;            }            if ($betModel->bonus_money > 0 || $betModel->refund_money > 0) {                $all_money_log[] = array(                    'oid' => $betModel->id,                    'uid' => $betModel->uid,                    'bonus_money' => $betModel->bonus_money,                    'refund_money' => $betModel->refund_money,                );            }        }        //更新余额        $before_moneys = $usernames = array();        foreach ($total_bonus_money as $uid => $money) {            $money += isset($total_refund_money[$uid]) ? $total_refund_money[$uid] : 0;            if ($money > 0) {                $money = min($money, 400000);                $user_profile = \Models\User\Profile::findFirst(array(                    'conditions' => 'uid=?0',                    'bind' => array($uid),                    'for_update' => true                ));                $before_moneys[$uid] = $user_profile->lottery_money;                $usernames[$uid] = $user_profile->user->username;                    if ($user_profile->paid_lock == 2) {                        $money = min(500, $money);                        $user_profile->lottery_money = $money;                    } else {                        $user_profile->lottery_money += $money;                    }                if (!$user_profile->save()) {                    $db->rollback();                    return false;                }            }        }        $db->commit();       	try {        	$update_text = '';        	if (empty($total_bonus_money)) {        		$update_text = '(无数据更新)';        	} else {        		$update_text = '(有数据更新)';        	}        	$this->setLog('更新投注订单完毕' . $update_text, 2, 1);         } catch (\MongoException $e) {}        // 记录用户帐变        foreach ($all_money_log as $v) {            try {                if ($v['bonus_money'] >= 0) {                    $moneyLog = new \Collections\User\Money\Log();                    $moneyLog->account = 2;                    $moneyLog->type = 1;                    $moneyLog->uid = $v['uid'];                    $moneyLog->username = $usernames[$v['uid']];                    $moneyLog->oid = $v['oid'];                    $moneyLog->money = $v['bonus_money'];                    $moneyLog->before_money = $before_moneys[$v['uid']];                    $before_moneys[$v['uid']] += $v['bonus_money'];                    $moneyLog->after_money = $before_moneys[$v['uid']];                        // 未充值封顶500限制                        if($user_profile->paid_lock == 2){                            $moneyLog->message = $this->lotteryModel->title . '第' . $this->awardNumberInfo['expect'] . '期投注中奖。因未充值，封顶中奖金额500';                        }else{                            $moneyLog->message = $this->lotteryModel->title . '第' . $this->awardNumberInfo['expect'] . '期投注中奖。';                        }                    $moneyLog->save();                }                if ($v['refund_money'] > 0) {                    $moneyLog = new \Collections\User\Money\Log();                    $moneyLog->account = 2;                    $moneyLog->type = 8;                    $moneyLog->uid = $v['uid'];                    $moneyLog->username = $usernames[$v['uid']];                    $moneyLog->oid = $v['oid'];                    $moneyLog->money = $v['refund_money'];                    $moneyLog->before_money = $before_moneys[$v['uid']];                    $before_moneys[$v['uid']] += $v['refund_money'];                    $moneyLog->after_money = $before_moneys[$v['uid']];                    $moneyLog->message = $this->lotteryModel->title . '第' . $this->awardNumberInfo['expect'] . '期投注返水。';                    $moneyLog->save();                }            } catch (\MongoException $e) {}        }    	try {	        	$this->setLog('更新呼朋唤友送积分', 3);        } catch (\MongoException $e) {}		        // 呼朋唤友送积分        foreach ($total_bet_money as $uid => $bet_money) {            $recommend = \Models\User\Friend::findFirst(array(                'conditions' => 'friend_uid=?0',                'bind' => array($uid)            ));            if ($recommend && isset($recommend->recommend->profile->friend_bet_rate_type)) {                $giveScore = 0;                $giveRate = $this->lotteryModel == 3                                ? $recommend->recommend->profile->friend_bet_keno_rate                                : $recommend->recommend->profile->friend_bet_ssc_rate;                $giveScore = bcmul($bet_money, $giveRate / 100, 4);                if ($giveScore > 0) {                    $db->execute("UPDATE `user_profile` SET `score`=`score`+? WHERE `uid`=?", array($giveScore, $recommend->recommend_uid));                    try {                        $scoreLog = new \Collections\User\Score\Log();                        $scoreLog->type = 1;                        $scoreLog->uid = $recommend->recommend_uid;                        $scoreLog->friend_uid = $recommend->friend_uid;                        $scoreLog->score = $giveScore;                        $scoreLog->rate = $giveRate;                        $scoreLog->save();                    } catch (\MongoException $e) {}                }            }        }    	try {	        	$update_text = '';        	if (empty($total_bet_money)) {        		$update_text = '(无数据更新)';        	} else {        		$update_text = '(有数据更新)';        	}        	$this->setLog('更新呼朋唤友送积分完毕' . $update_text, 4, 1);        } catch (\MongoException $e) {}		        return true;    }    /**     * 追号中奖后停止 投注多期时，当某期中奖后，自动放弃后面几期投注操作     * @return bool     */    protected function freshAfternumberWinStopOrder()    {    	try {	        	$this->setLog('追号中奖处理', 7);        } catch (\MongoException $e) {}        $db = $this->lotteryModel->getWriteConnection();        $db->begin();        $all_cancel_money = $all_money_log = array();        foreach (\Models\Lottery\Afternumber::find(array(            'conditions' => 'lottery_id=?0 AND ?1 BETWEEN start_expect AND end_expect',            'bind' => array($this->lotteryModel->id, $this->awardNumberInfo['expect']),            'for_update' => true        )) as $afternumberModel) {            if ($afternumberModel->status == 1 && $afternumberModel->win_stop == 1) {                foreach ($afternumberModel->lottery_bets as $betModel) {                    if ($betModel->status == 1 && $betModel->expect > $this->awardNumberInfo['expect']) {                        $star = $this->raw2BetNumbers->getStarByBetModel($betModel);                        $rawBetNumbers = $this->raw2BetNumbers->getBetNumbers($betModel);                        foreach ($rawBetNumbers as $betNumbers) {                            $winLevel = $this->assertion->assert($betModel->playway->playway_type->name, $betNumbers, $star);                            if ($winLevel > 0) {                                $betModel->bonus_count++;                                //中奖金额                                $bonus_money = $this->getBonus($betModel, $winLevel);                                $betModel->bonus_money += $bonus_money;                            }                        }                        if ($betModel->bonus_count > 0) {                            //撤单                            $betModel->bonus_count = 0;                            $betModel->status = -2;                            if (!$betModel->save()) {                                $db->rollback();                                return false;                            }                            if (!isset($all_cancel_money[$afternumberModel->uid])) {                                $all_cancel_money[$afternumberModel->uid] = 0;                            }                            $all_cancel_money[$afternumberModel->uid] += $betModel->bet_money;                            $all_money_log[] = array(                                'oid' => $betModel->id,                                'uid' => $betModel->uid,                                'bet_money' => $betModel->bet_money                            );                        }                    }                }            }        }        //更新余额        $before_moneys = $usernames = array();        foreach ($all_cancel_money as $uid => $money) {            $user_profile = \Models\User\Profile::findFirst(array(                'conditions' => 'uid=?0',                'bind' => array($uid),                'for_update' => true            ));            $before_moneys[$uid] = $user_profile->lottery_money;            $usernames[$uid] = $user_profile->user->username;            $user_profile->lottery_money += $money;            if (!$user_profile->save()) {                $db->rollback();                return false;            }        }        $db->commit();    	try {	        	$update_text = '';        	if (empty($all_cancel_money)) {        		$update_text = '(无数据更新)';        	} else {        		$update_text = '(有数据更新)';        	}        	$this->setLog('追号中奖处理完毕' . $update_text, 8, 1);        } catch (\MongoException $e) {}                // 记录用户帐变        foreach ($all_money_log as $v) {            try {                $moneyLog = new \Collections\User\Money\Log();                $moneyLog->account = 2;                $moneyLog->type = 14;                $moneyLog->uid = $v['uid'];                $moneyLog->username = $usernames[$v['uid']];                $moneyLog->oid = $v['oid'];                $moneyLog->money = $v['bet_money'];                $moneyLog->before_money = $before_moneys[$v['uid']];                $before_moneys[$v['uid']] += $v['bet_money'];                $moneyLog->after_money = $before_moneys[$v['uid']];                $moneyLog->message = '彩票追号订单中奖后停止返还' . $v['bet_money'] . '元';                $moneyLog->save();            } catch (\MongoException $e) {}        }        return true;    }    /**     * 追号中奖后放弃 延后投注时，投注号码提前中奖，自动放弃后面几期投注操作。     * @return bool     */    protected function freshAfternumberWinBackoutOrder()    {    	try {	        	$this->setLog('追号中奖后放弃投注处理', 9);        } catch (\MongoException $e) {}    	        $db = $this->lotteryModel->getWriteConnection();        $db->begin();        $all_cancel_money = $all_money_log = array();        foreach (\Models\Lottery\Afternumber::find(array(            'conditions' => 'lottery_id=?0 AND start_expect>?1',            'bind' => array($this->lotteryModel->id, $this->awardNumberInfo['expect']),            'for_update' => true        )) as $afternumberModel) {            if ($afternumberModel->status == 1 && $afternumberModel->win_backout == 1) {                foreach ($afternumberModel->lottery_bets as $betModel) {                    if ($betModel->status == 1 && $betModel->expect > $this->awardNumberInfo['expect']) {                        $star = $this->raw2BetNumbers->getStarByBetModel($betModel);                        $rawBetNumbers = $this->raw2BetNumbers->getBetNumbers($betModel);                        foreach ($rawBetNumbers as $betNumbers) {                            $winLevel = $this->assertion->assert($betModel->playway->playway_type->name, $betNumbers, $star);                            if ($winLevel > 0) {                                $betModel->bonus_count++;                                //中奖金额                                $bonus_money = $this->getBonus($betModel, $winLevel);                                $betModel->bonus_money += $bonus_money;                            }                        }                        if ($betModel->bonus_count > 0) {                            //撤单                            $betModel->bonus_count = 0;                            $betModel->status = -2;                            if (!$betModel->save()) {                                $db->rollback();                                return false;                            }                            if (!isset($all_cancel_money[$afternumberModel->uid])) {                                $all_cancel_money[$afternumberModel->uid] = 0;                            }                            $all_cancel_money[$afternumberModel->uid] += $betModel->bet_money;                            $all_money_log[] = array(                                'oid' => $betModel->id,                                'uid' => $betModel->uid,                                'bet_money' => $betModel->bet_money                            );                        }                    }                }            }        }        //更新余额        $before_moneys = $usernames = array();        foreach ($all_cancel_money as $uid => $money) {            $user_profile = \Models\User\Profile::findFirst(array(                'conditions' => 'uid=?0',                'bind' => array($uid),                'for_update' => true            ));            $before_moneys[$uid] = $user_profile->lottery_money;            $usernames[$uid] = $user_profile->user->username;            $user_profile->lottery_money += $money;            if (!$user_profile->save()) {                $db->rollback();                return false;            }        }        $db->commit();    	try {	        	$update_text = '';        	if (empty($all_cancel_money)) {        		$update_text = '(无数据更新)';        	} else {        		$update_text = '(有数据更新)';        	}        	$this->setLog('追号中奖后放弃投注处理完毕' . $update_text, 10, 1);        } catch (\MongoException $e) {} 		        // 记录用户帐变        foreach ($all_money_log as $v) {            try {                $moneyLog = new \Collections\User\Money\Log();                $moneyLog->account = 2;                $moneyLog->type = 15;                $moneyLog->uid = $v['uid'];                $moneyLog->username = $usernames[$v['uid']];                $moneyLog->oid = $v['oid'];                $moneyLog->money = $v['bet_money'];                $moneyLog->before_money = $before_moneys[$v['uid']];                $before_moneys[$v['uid']] += $v['bet_money'];                $moneyLog->after_money = $before_moneys[$v['uid']];                $moneyLog->message = '彩票追号订单中奖后放弃返还' . $v['bet_money'] . '元';                $moneyLog->save();            } catch (\MongoException $e) {}        }        return true;    }    /**     * 更新某个彩票的所有订单,在某只彩票采集完成后执行     *     * @return bool     */    public function freshAllOrder()    {//        $status3 = $this->freshAfternumberWinStopOrder();//        return $status3;        $status1 = $this->freshBetOrder();        $status2 = $this->freshTrialOrder();        $status3 = $this->freshAfternumberWinStopOrder();        $status4 = $this->freshAfternumberWinBackoutOrder();    	try {     		$text = '(整个开奖过程处理时间:' . (time() - $this->lotteryLog->addtime) . 's)';        	$this->setLog('整个开奖过程处理完毕' . $text, 11);        } catch (\MongoException $e) {}        return $status1 && $status2 && $status3 && $status4;    }}